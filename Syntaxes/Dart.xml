<?xml version="1.0" encoding="UTF-8"?>
<syntax name="dart">
    <meta>
        <name>Dart</name>
        <type>script</type>
        <preferred-file-extension>dart</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env dart" />
    </meta>

    <detectors>
        <extension priority="1.0">dart</extension>
    </detectors>

    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>

    <comments>
        <single>
            <expression>//</expression>
        </single>
        <multiline>
            <starts-with>
                <expression>/*</expression>
            </starts-with>
            <ends-with>
                <expression>*/</expression>
            </ends-with>
        </multiline>
    </comments>

    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&lt;" close="&gt;" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
        <pair open="“" close="”" />
        <pair open="‘" close="’" />
    </surrounding-pairs>

    <scopes>
        <!-- shebang -->
        <scope name="dart.comment.single.shebang">
            <expression>^\#!(.*)$</expression>
            <capture number="1" name="dart.comment.content" />
        </scope>
        <!-- imports -->
        <scope name="dart.meta.declaration">
            <starts-with>
                <expression>^\w*\b(library|import|part\s of|part|export)\b</expression>
                <capture number="0" name="dart.keyword.statement.import" />
            </starts-with>
            <ends-with />
            <subscopes anchored="true">
                <include syntax="self" collection="strings" />
                <include syntax="self" collection="comments" />
                <scope name="dart.keyword.other.import">
                    <expression>\b(as|show|hide)\b</expression>
                </scope>
                <scope name="dart.keyword.control">
                    <expression>\b(if)\b</expression>
                </scope>
            </subscopes>
        </scope>

        <include syntax="self" collection="comments" />
        <include syntax="self" collection="annotations" />
        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="constants-and-special-vars" />
        <include syntax="self" collection="strings" />

    </scopes>

    <!-- TODO completions -->

    <collections>

        <!-- !Dartdoc -->
        <collection name="dartdoc">
            <scope name="dart.identifier.dartdoc">
                <expression>(\[.*?\])</expression>
                <capture number="0" name="dart.identifier.key" />
            </scope>
            <scope name="dart.identifier.dartdoc">
                <expression>(^ {4,}(?![ \*]).*)</expression>
                <capture number="0" name="dart.identifier.source" />
            </scope>
            <scope name="dart.identifier.source">
                <starts-with>
                    <expression>```.*?$</expression>
                </starts-with>
                <ends-with>
                    <expression>```</expression>
                </ends-with>
            </scope>
            <scope name="dart.identifier.dartdoc">
                <expression>(`.*?`)</expression>
                <capture number="0" name="dart.identifier.string.source" />
            </scope>
            <scope name="dart.identifier.dartdoc">
                <expression>(\* ((    ).*))$</expression>
                <capture number="2" name="dart.identifier.variable.other.source" />
            </scope>
            <scope name="dart.identifier.variable.other.source">
                <expression>(\*    .*)$</expression>
            </scope>
        </collection>

        <!-- !Comments -->
        <collection name="comments">
            <!-- comment block empty -->
            <scope name="dart.comment.block.empty" spell-check="true">
                <expression>/\*\*/</expression>
                <capture number="0" name="dart.comment.punctuation.definition" />
            </scope>
            <include syntax="self" collection="comments-doc-oldschool" />
            <include syntax="self" collection="comments-doc" />
            <include syntax="self" collection="comments-inline" />
        </collection>
        <!-- !Comments-doc-oldschool -->
        <collection name="comments-doc-oldschool">
            <scope name="dart.comment.block.documentation" spell-check="true">
                <starts-with>
                    <expression>/\*\*</expression>
                </starts-with>
                <ends-with>
                    <expression>\*/</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments-doc-oldschool" />
                    <include syntax="self" collection="comments-block" />
                    <include syntax="self" collection="dartdoc" />
                </subscopes>
            </scope>
        </collection>
        <!-- !Comments-doc -->
        <collection name="comments-doc">
            <symbol type="comment" />
            <scope name="dart.comment.block.documentation" spell-check="true">
                <starts-with>
                    <expression>///</expression>
                </starts-with>
                <!-- Is there such thing as while? <expression>^\\s*///</expression> -->
                <ends-with>
                    <expression>.*</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="dartdoc" />
                </subscopes>
            </scope>
        </collection>
        <!-- !Comments-inline -->
        <collection name="comments-inline">
            <scope name="dart.comment.line.double-slash" spell-check="true">
                <expression>((//).*)$</expression>
                <capture number="1" name="dart.comment.line.double-slash" />
            </scope>
            <include syntax="self" collection="comments-block" />
        </collection>
        <!-- !Comments-block -->
        <collection name="comments-block">
            <scope name="dart.comment.block" spell-check="true">
                <starts-with>
                    <expression>/\*</expression>
                </starts-with>
                <ends-with>
                    <expression>\*/</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments-block" />
                </subscopes>
            </scope>
        </collection>

        <!-- !Annotations -->
        <collection name="annotations">
            <scope name="dart.identifier.constant.annotation">
                <expression>@[a-zA-Z]+</expression>
            </scope>
        </collection>

        <!-- !Constants-and-special-vars -->
        <collection name="constants-and-special-vars">
            <scope name="dart.value.number.boolean">
                <expression>(?&lt;!\$)\b(true|false|null)\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.self">
                <expression>(?&lt;!\$)\b(this|super)\b(?!\$)</expression>
            </scope>
            <scope name="dart.value.number">
                <expression>(?&lt;!\$)\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b(?!\$)</expression>
            </scope>
            <scope name="dart.identifier.constant.class">
                <expression>(?&lt;![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*|bool\b|num\b|int\b|double\b|dynamic\b)</expression>
            </scope>
            <scope name="dart.function.name">
                <expression>([_$]*[a-z][a-zA-Z0-9_$]*)(&lt;|\()</expression>
                <capture number="1" name="dart.identifier.method" />
            </scope>
            <scope name="dart.function.name">
                <expression>([_$]*[a-z][a-zA-Z0-9_$]*)(\s+=&gt;)</expression>
                <capture number="1" name="dart.identifier.method" />
                <capture number="2" name="dart.operator.closure" />
            </scope>
        </collection>

        <!-- !Keywords -->
        <collection name="keywords">
            <scope name="dart.keyword.cast">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\bas\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.control.catch-exception">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\b(try|on|catch|finally|throw|rethrow)\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.control">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\b(break|case|continue|default|do|else|for|if|in|return|switch|while)\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.control">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\b(sync(\*)?|async(\*)?|await|yield(\*)?)\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.control">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\bassert\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.control.new">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\b(new)\b(?!\$)</expression>
            </scope>
            <scope name="dart.keyword.declaration">
                <symbol type="keyword" />
                <expression>(?&lt;!\$)\b(abstract|class|enum|extends|extension|external|factory|implements|get|mixin|native|operator|set|typedef|with|covariant)\b(?!\$)</expression>
            </scope>
            <scope name="dart.operator">
                <expression>(?&lt;!\$)\b(is\!?)\b(?!\$)</expression>
            </scope>
            <scope name="dart.operator.ternary">
                <expression>\?|:</expression>
            </scope>
            <scope name="dart.operator.bitwise">
                <expression>(&lt;&lt;|&gt;&gt;&gt;?|~|\^|\||&amp;)</expression>
            </scope>
            <scope name="dart.operator.assignment.bitwise">
                <expression>((&amp;|\^|\||&lt;&lt;|&gt;&gt;&gt;?)=)</expression>
            </scope>
            <scope name="dart.operator.closure">
                <expression>(=&gt;)</expression>
            </scope>
            <scope name="dart.operator.comparison">
                <expression>(==|!=|&lt;=?|&gt;=?)</expression>
            </scope>
            <scope name="dart.operator.assignment.arithmetic">
                <expression>(([+*/%-]|\~)=)</expression>
            </scope>
            <scope name="dart.operator.assignment">
                <expression>(=)</expression>
            </scope>
            <scope name="dart.operator.increment-decrement">
                <expression>(\-\-|\+\+)</expression>
            </scope>
            <scope name="dart.operator.arithmetic">
                <expression>(\-|\+|\*|\/|\~\/|%)</expression>
            </scope>
            <scope name="dart.operator.logical">
                <expression>(!|&amp;&amp;|\|\|)</expression>
            </scope>
            <scope name="dart.operator.spread">
                <expression>\.\.\.</expression>
            </scope>
            <scope name="dart.keyword.modifier">
                <expression>(?&lt;!\$)\b(static|final|const|required|late)\b(?!\$)</expression>
            </scope>
            <!-- Can't decide on the color of void and var -->
            <!-- <scope name="dart.keyword.modifier.primative"> -->
            <scope name="dart.identifier.constant.primitive">
                <expression>(?&lt;!\$)\b(?:void|var)\b(?!\$)</expression>
            </scope>
        </collection>

        <!-- !String interp -->
        <collection name="string-interp">
            <scope name="dart.identifier">
                <expression>\$([a-zA-Z0-9_]+)</expression>
                <capture number="1" name="dart.identifier.argument.name" />
                <!-- <capture number="3" name="dart.identifier.argument.name" /> -->
            </scope>
            <scope name="dart.identifier" reset-styles="true">
                <starts-with>
                    <expression>(\$\{)</expression>
                    <capture number="1" name="dart.identifier.string" />
                </starts-with>
                <ends-with>
                    <expression>(\})</expression>
                    <capture number="1" name="dart.identifier.string" />
                </ends-with>
                <!-- <capture number="2" name="dart.identifier.argument.name" /> -->
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="annotations" />
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="constants-and-special-vars" />
                    <include syntax="self" collection="strings" />
                </subscopes>
            </scope>
            <scope name="dart.string.single.escape">
                <expression>\\.</expression>
            </scope>
        </collection>

        <!-- !Strings -->
        <collection name="strings">
            <!-- triple double quote interpolated -->
            <scope name="dart.string.interpolated.triple.double">
                <starts-with>
                    <expression>(?&lt;!r)&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;(?!&quot;)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="string-interp" />
                </subscopes>
            </scope>
            <!-- triple single quote interpolated -->
            <scope name="dart.string.interpolated.triple.single">
                <starts-with>
                    <expression>(?&lt;!r)&apos;&apos;&apos;</expression>
                </starts-with>
                <ends-with>
                    <expression>&apos;&apos;&apos;(?!&apos;)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="string-interp" />
                </subscopes>
            </scope>
            <!-- triple double quote quoted -->
            <scope name="dart.string.quoted.triple.double">
                <starts-with>
                    <expression>r&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;(?!&quot;)</expression>
                </ends-with>
            </scope>
            <!-- triple single quote quoted -->
            <scope name="dart.string.quoted.triple.single">
                <starts-with>
                    <expression>r&apos;&apos;&apos;</expression>
                </starts-with>
                <ends-with>
                    <expression>&apos;&apos;&apos;(?!&apos;)</expression>
                </ends-with>
            </scope>
            <!-- double quote interpolated -->
            <scope name="dart.string.interpolated.double">
                <starts-with>
                    <expression>(?&lt;!\|r)&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;</expression>
                </ends-with>
                <subscopes>
                    <scope name="invalid.string.newline">
                        <expression>\n</expression>
                    </scope>
                    <include syntax="self" collection="string-interp" />
                </subscopes>
            </scope>
            <!-- double quote quoted -->
            <scope name="dart.string.double.double">
                <starts-with>
                    <expression>r&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;</expression>
                </ends-with>
                <subscopes>
                    <scope name="invalid.string.newline">
                        <expression>\n</expression>
                    </scope>
                </subscopes>
            </scope>
            <!-- single quote interpolated -->
            <scope name="dart.string.interpolated.single">
                <starts-with>
                    <expression>(?&lt;!\|r)&apos;</expression>
                </starts-with>
                <ends-with>
                    <expression>&apos;</expression>
                </ends-with>
                <subscopes>
                    <scope name="invalid.string.newline">
                        <expression>\n</expression>
                    </scope>
                    <include syntax="self" collection="string-interp" />
                </subscopes>
            </scope>
            <!-- single quote quoted -->
            <scope name="dart.string.single.quoted">
                <starts-with>
                    <expression>r&apos;</expression>
                </starts-with>
                <ends-with>
                    <expression>&apos;</expression>
                </ends-with>
                <subscopes>
                    <scope name="invalid.string.newline">
                        <expression>\n</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>

    </collections>
</syntax>
